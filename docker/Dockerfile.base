FROM ubuntu:22.04

ENV DEBIAN_FRONTEND=noninteractive

# --- Install base tools and dependencies ---
RUN apt-get update && apt-get install -y \
    build-essential \
    git \
    curl \
    wget \
    cmake \
    pkg-config \
    lsb-release \
    software-properties-common \
    python3 \
    python3-pip \
    unzip \
    uuid-dev \
    libsasl2-dev \
    libssl-dev \
    libpq-dev \
    libmysqlclient-dev \
    libsqlite3-dev \
    librabbitmq-dev \
    librdkafka-dev \
    libcurl4-openssl-dev \
    autoconf \
    libtool \
    protobuf-compiler \
    libc-ares-dev \
    pigz \
    zlib1g \
    && rm -rf /var/lib/apt/lists/*

# --- Upgrade to latest CMake (>= 3.25) ---
RUN apt-get purge --auto-remove -y cmake && \
    curl -LO https://github.com/Kitware/CMake/releases/download/v3.27.9/cmake-3.27.9-linux-x86_64.sh && \
    chmod +x cmake-3.27.9-linux-x86_64.sh && \
    ./cmake-3.27.9-linux-x86_64.sh --skip-license --prefix=/usr/local && \
    rm cmake-3.27.9-linux-x86_64.sh

# --- Build and install Uber H3 ---
RUN git clone https://github.com/uber/h3.git /tmp/h3 && \
    cd /tmp/h3 && mkdir build && cd build && \
    cmake .. -DCMAKE_INSTALL_PREFIX=/usr/local -DCMAKE_POSITION_INDEPENDENT_CODE=ON && \
    make -j$(nproc) && make install && cd / && rm -rf /tmp/h3

# --- Build librdkafka ---
RUN git clone https://github.com/confluentinc/librdkafka.git /tmp/librdkafka && \
    cd /tmp/librdkafka && mkdir build && cd build && \
    cmake .. && make -j$(nproc) && make install && cd / && rm -rf /tmp/librdkafka

# --- Build rabbitmq-c ---
RUN git clone https://github.com/alanxz/rabbitmq-c.git /tmp/rabbitmq-c && \
    cd /tmp/rabbitmq-c && mkdir build && cd build && \
    cmake .. -DBUILD_STATIC_LIBS=ON -DBUILD_SHARED_LIBS=ON -DENABLE_SSL_SUPPORT=ON -DBUILD_TESTS=OFF && \
    make -j$(nproc) && make install && cd / && rm -rf /tmp/rabbitmq-c

# --- Install nlohmann_json (header-only) ---
RUN git clone https://github.com/nlohmann/json.git /tmp/json && \
    cd /tmp/json && mkdir build && cd build && \
    cmake .. -DCMAKE_INSTALL_PREFIX=/usr/local && make install && cd / && rm -rf /tmp/json

# --- Install httplib (single header) ---
RUN curl -Lo /usr/local/include/httplib.h https://raw.githubusercontent.com/yhirose/cpp-httplib/master/httplib.h

# Clone and build AMQP-CPP
RUN git clone https://github.com/akalend/amqpcpp.git && git clone https://github.com/alanxz/rabbitmq-c.git /amqpcpp/rabbitmq-c && \
    cd amqpcpp && mkdir build && cd build && \
    cmake .. -DCMAKE_BUILD_TYPE=Release -DAMQP-CPP_BUILD_SHARED=ON && \
    make -j$(nproc) && make install && cp libamqpcpp.so /usr/local/lib && cp -r ../include/* /usr/local/include && \
    cd ../.. 

RUN git clone https://github.com/CopernicaMarketingSoftware/AMQP-CPP.git && \
    cd AMQP-CPP && mkdir build && cd build && \
    cmake .. -DCMAKE_BUILD_TYPE=Release -DAMQP-CPP_BUILD_SHARED=ON && \
    make -j$(nproc) && make install && \
    cd ../.. 

RUN cp /amqpcpp/build/libamqpcpp.so /usr/local/lib

# --- Fix include path for rabbitmq-c / AMQP ---
RUN mkdir -p /usr/local/include/rabbitmq-c && \
    ln -sf /usr/local/include/AMQPcpp.h /usr/local/include/rabbitmq-c/AMQPcpp.h

# Clone and build gRPC with all submodules
WORKDIR /tmp

RUN git clone --recurse-submodules -b v1.63.0 https://github.com/grpc/grpc && \
    cd grpc && mkdir -p cmake/build && cd cmake/build && \
    cmake ../.. \
        -DCMAKE_BUILD_TYPE=Release \
        -DgRPC_INSTALL=ON \
        -DgRPC_BUILD_TESTS=OFF \
        -DgRPC_PROTOBUF_PROVIDER=module \
        -DgRPC_ZLIB_PROVIDER=package \
        -DgRPC_CARES_PROVIDER=module \
        -DgRPC_ABSL_PROVIDER=module \
        -DgRPC_RE2_PROVIDER=module && \
    make -j$(nproc) && make install && \
    cd / && rm -rf /tmp/grpc

# Download, build, and install zlib 1.3.1
RUN apt-get update && apt-get install -y \
    build-essential \
    wget \
    git \
    && cd /tmp \
    && wget http://zlib.net/zlib-1.3.1.tar.gz \
    && tar -xvzf zlib-1.3.1.tar.gz \
    && cd zlib-1.3.1 \
    && ./configure \
    && make \
    && make install \
    && echo "/usr/local/lib" > /etc/ld.so.conf.d/zlib.conf \
    && ldconfig \
    && cd /tmp \
    && rm -rf zlib-1.3.1*

# Optionally rebuild pigz to use new zlib
RUN git clone https://github.com/madler/pigz.git /tmp/pigz \
    && cd /tmp/pigz \
    && make \
    && make install \
    && rm -rf /tmp/pigz

# --- Setup environment variables ---
ENV CMAKE_PREFIX_PATH=/usr/local:/usr/local/lib/cmake:/usr/local/lib64/cmake:/usr/local/lib/cmake/RdKafka
ENV CMAKE_MODULE_PATH=/usr/local/lib/cmake
ENV PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:/usr/lib/pkgconfig:/usr/lib/x86_64-linux-gnu/pkgconfig
ENV LD_LIBRARY_PATH=/usr/local/lib:/usr/lib:/usr/lib/x86_64-linux-gnu
ENV CPLUS_INCLUDE_PATH=/usr/local/include:/usr/local/include/rabbitmq-c

# Ensure the system finds installed libraries
RUN ldconfig

# --- Install Conan ---
RUN pip3 install conan && \
    conan profile detect --force

# --- Clone required C++ modules ---
RUN git clone https://github.com/prrathnayake/cpp-base.git /opt/cpp-base && \
    git clone https://github.com/prrathnayake/cpp-tools.git /opt/cpp-tools

# --- Build and export cpp-tools ---
RUN conan build /opt/cpp-tools --build=missing && \
    conan export /opt/cpp-tools --user=pasan --channel=testing

# --- Build cpp-base ---
RUN python3 /opt/cpp-tools/module/scripts/buildBase.py /opt/cpp-base

CMD ["/bin/bash"]
