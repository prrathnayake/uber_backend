// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: location.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_location_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_location_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_location_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_location_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_location_2eproto;
namespace UberBackend {
class LocationAck;
struct LocationAckDefaultTypeInternal;
extern LocationAckDefaultTypeInternal _LocationAck_default_instance_;
class NearbyRequest;
struct NearbyRequestDefaultTypeInternal;
extern NearbyRequestDefaultTypeInternal _NearbyRequest_default_instance_;
class NearbyUsers;
struct NearbyUsersDefaultTypeInternal;
extern NearbyUsersDefaultTypeInternal _NearbyUsers_default_instance_;
class UserInfo;
struct UserInfoDefaultTypeInternal;
extern UserInfoDefaultTypeInternal _UserInfo_default_instance_;
class UserLocation;
struct UserLocationDefaultTypeInternal;
extern UserLocationDefaultTypeInternal _UserLocation_default_instance_;
}  // namespace UberBackend
PROTOBUF_NAMESPACE_OPEN
template<> ::UberBackend::LocationAck* Arena::CreateMaybeMessage<::UberBackend::LocationAck>(Arena*);
template<> ::UberBackend::NearbyRequest* Arena::CreateMaybeMessage<::UberBackend::NearbyRequest>(Arena*);
template<> ::UberBackend::NearbyUsers* Arena::CreateMaybeMessage<::UberBackend::NearbyUsers>(Arena*);
template<> ::UberBackend::UserInfo* Arena::CreateMaybeMessage<::UberBackend::UserInfo>(Arena*);
template<> ::UberBackend::UserLocation* Arena::CreateMaybeMessage<::UberBackend::UserLocation>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace UberBackend {

// ===================================================================

class UserLocation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UberBackend.UserLocation) */ {
 public:
  inline UserLocation() : UserLocation(nullptr) {}
  ~UserLocation() override;
  explicit PROTOBUF_CONSTEXPR UserLocation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserLocation(const UserLocation& from);
  UserLocation(UserLocation&& from) noexcept
    : UserLocation() {
    *this = ::std::move(from);
  }

  inline UserLocation& operator=(const UserLocation& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserLocation& operator=(UserLocation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserLocation& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserLocation* internal_default_instance() {
    return reinterpret_cast<const UserLocation*>(
               &_UserLocation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UserLocation& a, UserLocation& b) {
    a.Swap(&b);
  }
  inline void Swap(UserLocation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserLocation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserLocation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserLocation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserLocation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UserLocation& from) {
    UserLocation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserLocation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UberBackend.UserLocation";
  }
  protected:
  explicit UserLocation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kLatitudeFieldNumber = 2,
    kLongitudeFieldNumber = 3,
    kTimestampFieldNumber = 4,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // double latitude = 2;
  void clear_latitude();
  double latitude() const;
  void set_latitude(double value);
  private:
  double _internal_latitude() const;
  void _internal_set_latitude(double value);
  public:

  // double longitude = 3;
  void clear_longitude();
  double longitude() const;
  void set_longitude(double value);
  private:
  double _internal_longitude() const;
  void _internal_set_longitude(double value);
  public:

  // int64 timestamp = 4;
  void clear_timestamp();
  int64_t timestamp() const;
  void set_timestamp(int64_t value);
  private:
  int64_t _internal_timestamp() const;
  void _internal_set_timestamp(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:UberBackend.UserLocation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
    double latitude_;
    double longitude_;
    int64_t timestamp_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_location_2eproto;
};
// -------------------------------------------------------------------

class LocationAck final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UberBackend.LocationAck) */ {
 public:
  inline LocationAck() : LocationAck(nullptr) {}
  ~LocationAck() override;
  explicit PROTOBUF_CONSTEXPR LocationAck(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LocationAck(const LocationAck& from);
  LocationAck(LocationAck&& from) noexcept
    : LocationAck() {
    *this = ::std::move(from);
  }

  inline LocationAck& operator=(const LocationAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline LocationAck& operator=(LocationAck&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LocationAck& default_instance() {
    return *internal_default_instance();
  }
  static inline const LocationAck* internal_default_instance() {
    return reinterpret_cast<const LocationAck*>(
               &_LocationAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LocationAck& a, LocationAck& b) {
    a.Swap(&b);
  }
  inline void Swap(LocationAck* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LocationAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LocationAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LocationAck>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LocationAck& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const LocationAck& from) {
    LocationAck::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LocationAck* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UberBackend.LocationAck";
  }
  protected:
  explicit LocationAck(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
  };
  // string message = 1;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:UberBackend.LocationAck)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_location_2eproto;
};
// -------------------------------------------------------------------

class NearbyRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UberBackend.NearbyRequest) */ {
 public:
  inline NearbyRequest() : NearbyRequest(nullptr) {}
  ~NearbyRequest() override;
  explicit PROTOBUF_CONSTEXPR NearbyRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NearbyRequest(const NearbyRequest& from);
  NearbyRequest(NearbyRequest&& from) noexcept
    : NearbyRequest() {
    *this = ::std::move(from);
  }

  inline NearbyRequest& operator=(const NearbyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline NearbyRequest& operator=(NearbyRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NearbyRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const NearbyRequest* internal_default_instance() {
    return reinterpret_cast<const NearbyRequest*>(
               &_NearbyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(NearbyRequest& a, NearbyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(NearbyRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NearbyRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NearbyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NearbyRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NearbyRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NearbyRequest& from) {
    NearbyRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NearbyRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UberBackend.NearbyRequest";
  }
  protected:
  explicit NearbyRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLatitudeFieldNumber = 1,
    kLongitudeFieldNumber = 2,
    kRadiusKmFieldNumber = 3,
  };
  // double latitude = 1;
  void clear_latitude();
  double latitude() const;
  void set_latitude(double value);
  private:
  double _internal_latitude() const;
  void _internal_set_latitude(double value);
  public:

  // double longitude = 2;
  void clear_longitude();
  double longitude() const;
  void set_longitude(double value);
  private:
  double _internal_longitude() const;
  void _internal_set_longitude(double value);
  public:

  // double radius_km = 3;
  void clear_radius_km();
  double radius_km() const;
  void set_radius_km(double value);
  private:
  double _internal_radius_km() const;
  void _internal_set_radius_km(double value);
  public:

  // @@protoc_insertion_point(class_scope:UberBackend.NearbyRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    double latitude_;
    double longitude_;
    double radius_km_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_location_2eproto;
};
// -------------------------------------------------------------------

class UserInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UberBackend.UserInfo) */ {
 public:
  inline UserInfo() : UserInfo(nullptr) {}
  ~UserInfo() override;
  explicit PROTOBUF_CONSTEXPR UserInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UserInfo(const UserInfo& from);
  UserInfo(UserInfo&& from) noexcept
    : UserInfo() {
    *this = ::std::move(from);
  }

  inline UserInfo& operator=(const UserInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline UserInfo& operator=(UserInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UserInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const UserInfo* internal_default_instance() {
    return reinterpret_cast<const UserInfo*>(
               &_UserInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(UserInfo& a, UserInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(UserInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UserInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UserInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UserInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UserInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UserInfo& from) {
    UserInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UserInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UberBackend.UserInfo";
  }
  protected:
  explicit UserInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kLatitudeFieldNumber = 2,
    kLongitudeFieldNumber = 3,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // double latitude = 2;
  void clear_latitude();
  double latitude() const;
  void set_latitude(double value);
  private:
  double _internal_latitude() const;
  void _internal_set_latitude(double value);
  public:

  // double longitude = 3;
  void clear_longitude();
  double longitude() const;
  void set_longitude(double value);
  private:
  double _internal_longitude() const;
  void _internal_set_longitude(double value);
  public:

  // @@protoc_insertion_point(class_scope:UberBackend.UserInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
    double latitude_;
    double longitude_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_location_2eproto;
};
// -------------------------------------------------------------------

class NearbyUsers final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UberBackend.NearbyUsers) */ {
 public:
  inline NearbyUsers() : NearbyUsers(nullptr) {}
  ~NearbyUsers() override;
  explicit PROTOBUF_CONSTEXPR NearbyUsers(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NearbyUsers(const NearbyUsers& from);
  NearbyUsers(NearbyUsers&& from) noexcept
    : NearbyUsers() {
    *this = ::std::move(from);
  }

  inline NearbyUsers& operator=(const NearbyUsers& from) {
    CopyFrom(from);
    return *this;
  }
  inline NearbyUsers& operator=(NearbyUsers&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NearbyUsers& default_instance() {
    return *internal_default_instance();
  }
  static inline const NearbyUsers* internal_default_instance() {
    return reinterpret_cast<const NearbyUsers*>(
               &_NearbyUsers_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(NearbyUsers& a, NearbyUsers& b) {
    a.Swap(&b);
  }
  inline void Swap(NearbyUsers* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NearbyUsers* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NearbyUsers* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NearbyUsers>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NearbyUsers& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const NearbyUsers& from) {
    NearbyUsers::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NearbyUsers* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UberBackend.NearbyUsers";
  }
  protected:
  explicit NearbyUsers(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsersFieldNumber = 1,
  };
  // repeated .UberBackend.UserInfo users = 1;
  int users_size() const;
  private:
  int _internal_users_size() const;
  public:
  void clear_users();
  ::UberBackend::UserInfo* mutable_users(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UberBackend::UserInfo >*
      mutable_users();
  private:
  const ::UberBackend::UserInfo& _internal_users(int index) const;
  ::UberBackend::UserInfo* _internal_add_users();
  public:
  const ::UberBackend::UserInfo& users(int index) const;
  ::UberBackend::UserInfo* add_users();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UberBackend::UserInfo >&
      users() const;

  // @@protoc_insertion_point(class_scope:UberBackend.NearbyUsers)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UberBackend::UserInfo > users_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_location_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UserLocation

// string user_id = 1;
inline void UserLocation::clear_user_id() {
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& UserLocation::user_id() const {
  // @@protoc_insertion_point(field_get:UberBackend.UserLocation.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserLocation::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:UberBackend.UserLocation.user_id)
}
inline std::string* UserLocation::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:UberBackend.UserLocation.user_id)
  return _s;
}
inline const std::string& UserLocation::_internal_user_id() const {
  return _impl_.user_id_.Get();
}
inline void UserLocation::_internal_set_user_id(const std::string& value) {
  
  _impl_.user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* UserLocation::_internal_mutable_user_id() {
  
  return _impl_.user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* UserLocation::release_user_id() {
  // @@protoc_insertion_point(field_release:UberBackend.UserLocation.user_id)
  return _impl_.user_id_.Release();
}
inline void UserLocation::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  _impl_.user_id_.SetAllocated(user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:UberBackend.UserLocation.user_id)
}

// double latitude = 2;
inline void UserLocation::clear_latitude() {
  _impl_.latitude_ = 0;
}
inline double UserLocation::_internal_latitude() const {
  return _impl_.latitude_;
}
inline double UserLocation::latitude() const {
  // @@protoc_insertion_point(field_get:UberBackend.UserLocation.latitude)
  return _internal_latitude();
}
inline void UserLocation::_internal_set_latitude(double value) {
  
  _impl_.latitude_ = value;
}
inline void UserLocation::set_latitude(double value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:UberBackend.UserLocation.latitude)
}

// double longitude = 3;
inline void UserLocation::clear_longitude() {
  _impl_.longitude_ = 0;
}
inline double UserLocation::_internal_longitude() const {
  return _impl_.longitude_;
}
inline double UserLocation::longitude() const {
  // @@protoc_insertion_point(field_get:UberBackend.UserLocation.longitude)
  return _internal_longitude();
}
inline void UserLocation::_internal_set_longitude(double value) {
  
  _impl_.longitude_ = value;
}
inline void UserLocation::set_longitude(double value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:UberBackend.UserLocation.longitude)
}

// int64 timestamp = 4;
inline void UserLocation::clear_timestamp() {
  _impl_.timestamp_ = int64_t{0};
}
inline int64_t UserLocation::_internal_timestamp() const {
  return _impl_.timestamp_;
}
inline int64_t UserLocation::timestamp() const {
  // @@protoc_insertion_point(field_get:UberBackend.UserLocation.timestamp)
  return _internal_timestamp();
}
inline void UserLocation::_internal_set_timestamp(int64_t value) {
  
  _impl_.timestamp_ = value;
}
inline void UserLocation::set_timestamp(int64_t value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:UberBackend.UserLocation.timestamp)
}

// -------------------------------------------------------------------

// LocationAck

// string message = 1;
inline void LocationAck::clear_message() {
  _impl_.message_.ClearToEmpty();
}
inline const std::string& LocationAck::message() const {
  // @@protoc_insertion_point(field_get:UberBackend.LocationAck.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void LocationAck::set_message(ArgT0&& arg0, ArgT... args) {
 
 _impl_.message_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:UberBackend.LocationAck.message)
}
inline std::string* LocationAck::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:UberBackend.LocationAck.message)
  return _s;
}
inline const std::string& LocationAck::_internal_message() const {
  return _impl_.message_.Get();
}
inline void LocationAck::_internal_set_message(const std::string& value) {
  
  _impl_.message_.Set(value, GetArenaForAllocation());
}
inline std::string* LocationAck::_internal_mutable_message() {
  
  return _impl_.message_.Mutable(GetArenaForAllocation());
}
inline std::string* LocationAck::release_message() {
  // @@protoc_insertion_point(field_release:UberBackend.LocationAck.message)
  return _impl_.message_.Release();
}
inline void LocationAck::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  _impl_.message_.SetAllocated(message, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.message_.IsDefault()) {
    _impl_.message_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:UberBackend.LocationAck.message)
}

// -------------------------------------------------------------------

// NearbyRequest

// double latitude = 1;
inline void NearbyRequest::clear_latitude() {
  _impl_.latitude_ = 0;
}
inline double NearbyRequest::_internal_latitude() const {
  return _impl_.latitude_;
}
inline double NearbyRequest::latitude() const {
  // @@protoc_insertion_point(field_get:UberBackend.NearbyRequest.latitude)
  return _internal_latitude();
}
inline void NearbyRequest::_internal_set_latitude(double value) {
  
  _impl_.latitude_ = value;
}
inline void NearbyRequest::set_latitude(double value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:UberBackend.NearbyRequest.latitude)
}

// double longitude = 2;
inline void NearbyRequest::clear_longitude() {
  _impl_.longitude_ = 0;
}
inline double NearbyRequest::_internal_longitude() const {
  return _impl_.longitude_;
}
inline double NearbyRequest::longitude() const {
  // @@protoc_insertion_point(field_get:UberBackend.NearbyRequest.longitude)
  return _internal_longitude();
}
inline void NearbyRequest::_internal_set_longitude(double value) {
  
  _impl_.longitude_ = value;
}
inline void NearbyRequest::set_longitude(double value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:UberBackend.NearbyRequest.longitude)
}

// double radius_km = 3;
inline void NearbyRequest::clear_radius_km() {
  _impl_.radius_km_ = 0;
}
inline double NearbyRequest::_internal_radius_km() const {
  return _impl_.radius_km_;
}
inline double NearbyRequest::radius_km() const {
  // @@protoc_insertion_point(field_get:UberBackend.NearbyRequest.radius_km)
  return _internal_radius_km();
}
inline void NearbyRequest::_internal_set_radius_km(double value) {
  
  _impl_.radius_km_ = value;
}
inline void NearbyRequest::set_radius_km(double value) {
  _internal_set_radius_km(value);
  // @@protoc_insertion_point(field_set:UberBackend.NearbyRequest.radius_km)
}

// -------------------------------------------------------------------

// UserInfo

// string user_id = 1;
inline void UserInfo::clear_user_id() {
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& UserInfo::user_id() const {
  // @@protoc_insertion_point(field_get:UberBackend.UserInfo.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UserInfo::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:UberBackend.UserInfo.user_id)
}
inline std::string* UserInfo::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:UberBackend.UserInfo.user_id)
  return _s;
}
inline const std::string& UserInfo::_internal_user_id() const {
  return _impl_.user_id_.Get();
}
inline void UserInfo::_internal_set_user_id(const std::string& value) {
  
  _impl_.user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* UserInfo::_internal_mutable_user_id() {
  
  return _impl_.user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* UserInfo::release_user_id() {
  // @@protoc_insertion_point(field_release:UberBackend.UserInfo.user_id)
  return _impl_.user_id_.Release();
}
inline void UserInfo::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  _impl_.user_id_.SetAllocated(user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:UberBackend.UserInfo.user_id)
}

// double latitude = 2;
inline void UserInfo::clear_latitude() {
  _impl_.latitude_ = 0;
}
inline double UserInfo::_internal_latitude() const {
  return _impl_.latitude_;
}
inline double UserInfo::latitude() const {
  // @@protoc_insertion_point(field_get:UberBackend.UserInfo.latitude)
  return _internal_latitude();
}
inline void UserInfo::_internal_set_latitude(double value) {
  
  _impl_.latitude_ = value;
}
inline void UserInfo::set_latitude(double value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:UberBackend.UserInfo.latitude)
}

// double longitude = 3;
inline void UserInfo::clear_longitude() {
  _impl_.longitude_ = 0;
}
inline double UserInfo::_internal_longitude() const {
  return _impl_.longitude_;
}
inline double UserInfo::longitude() const {
  // @@protoc_insertion_point(field_get:UberBackend.UserInfo.longitude)
  return _internal_longitude();
}
inline void UserInfo::_internal_set_longitude(double value) {
  
  _impl_.longitude_ = value;
}
inline void UserInfo::set_longitude(double value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:UberBackend.UserInfo.longitude)
}

// -------------------------------------------------------------------

// NearbyUsers

// repeated .UberBackend.UserInfo users = 1;
inline int NearbyUsers::_internal_users_size() const {
  return _impl_.users_.size();
}
inline int NearbyUsers::users_size() const {
  return _internal_users_size();
}
inline void NearbyUsers::clear_users() {
  _impl_.users_.Clear();
}
inline ::UberBackend::UserInfo* NearbyUsers::mutable_users(int index) {
  // @@protoc_insertion_point(field_mutable:UberBackend.NearbyUsers.users)
  return _impl_.users_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UberBackend::UserInfo >*
NearbyUsers::mutable_users() {
  // @@protoc_insertion_point(field_mutable_list:UberBackend.NearbyUsers.users)
  return &_impl_.users_;
}
inline const ::UberBackend::UserInfo& NearbyUsers::_internal_users(int index) const {
  return _impl_.users_.Get(index);
}
inline const ::UberBackend::UserInfo& NearbyUsers::users(int index) const {
  // @@protoc_insertion_point(field_get:UberBackend.NearbyUsers.users)
  return _internal_users(index);
}
inline ::UberBackend::UserInfo* NearbyUsers::_internal_add_users() {
  return _impl_.users_.Add();
}
inline ::UberBackend::UserInfo* NearbyUsers::add_users() {
  ::UberBackend::UserInfo* _add = _internal_add_users();
  // @@protoc_insertion_point(field_add:UberBackend.NearbyUsers.users)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::UberBackend::UserInfo >&
NearbyUsers::users() const {
  // @@protoc_insertion_point(field_list:UberBackend.NearbyUsers.users)
  return _impl_.users_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace UberBackend

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_location_2eproto
