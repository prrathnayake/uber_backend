// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: location.proto

#include "location.pb.h"
#include "location.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace UberBackend {

static const char* LocationService_method_names[] = {
  "/UberBackend.LocationService/SendLocation",
  "/UberBackend.LocationService/GetNearbyUsers",
};

std::unique_ptr< LocationService::Stub> LocationService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< LocationService::Stub> stub(new LocationService::Stub(channel, options));
  return stub;
}

LocationService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_SendLocation_(LocationService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetNearbyUsers_(LocationService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status LocationService::Stub::SendLocation(::grpc::ClientContext* context, const ::UberBackend::UserLocation& request, ::UberBackend::LocationAck* response) {
  return ::grpc::internal::BlockingUnaryCall< ::UberBackend::UserLocation, ::UberBackend::LocationAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SendLocation_, context, request, response);
}

void LocationService::Stub::async::SendLocation(::grpc::ClientContext* context, const ::UberBackend::UserLocation* request, ::UberBackend::LocationAck* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::UberBackend::UserLocation, ::UberBackend::LocationAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendLocation_, context, request, response, std::move(f));
}

void LocationService::Stub::async::SendLocation(::grpc::ClientContext* context, const ::UberBackend::UserLocation* request, ::UberBackend::LocationAck* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SendLocation_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::UberBackend::LocationAck>* LocationService::Stub::PrepareAsyncSendLocationRaw(::grpc::ClientContext* context, const ::UberBackend::UserLocation& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::UberBackend::LocationAck, ::UberBackend::UserLocation, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SendLocation_, context, request);
}

::grpc::ClientAsyncResponseReader< ::UberBackend::LocationAck>* LocationService::Stub::AsyncSendLocationRaw(::grpc::ClientContext* context, const ::UberBackend::UserLocation& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSendLocationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status LocationService::Stub::GetNearbyUsers(::grpc::ClientContext* context, const ::UberBackend::NearbyRequest& request, ::UberBackend::NearbyUsers* response) {
  return ::grpc::internal::BlockingUnaryCall< ::UberBackend::NearbyRequest, ::UberBackend::NearbyUsers, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetNearbyUsers_, context, request, response);
}

void LocationService::Stub::async::GetNearbyUsers(::grpc::ClientContext* context, const ::UberBackend::NearbyRequest* request, ::UberBackend::NearbyUsers* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::UberBackend::NearbyRequest, ::UberBackend::NearbyUsers, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetNearbyUsers_, context, request, response, std::move(f));
}

void LocationService::Stub::async::GetNearbyUsers(::grpc::ClientContext* context, const ::UberBackend::NearbyRequest* request, ::UberBackend::NearbyUsers* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetNearbyUsers_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::UberBackend::NearbyUsers>* LocationService::Stub::PrepareAsyncGetNearbyUsersRaw(::grpc::ClientContext* context, const ::UberBackend::NearbyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::UberBackend::NearbyUsers, ::UberBackend::NearbyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetNearbyUsers_, context, request);
}

::grpc::ClientAsyncResponseReader< ::UberBackend::NearbyUsers>* LocationService::Stub::AsyncGetNearbyUsersRaw(::grpc::ClientContext* context, const ::UberBackend::NearbyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetNearbyUsersRaw(context, request, cq);
  result->StartCall();
  return result;
}

LocationService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LocationService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LocationService::Service, ::UberBackend::UserLocation, ::UberBackend::LocationAck, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](LocationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::UberBackend::UserLocation* req,
             ::UberBackend::LocationAck* resp) {
               return service->SendLocation(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LocationService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LocationService::Service, ::UberBackend::NearbyRequest, ::UberBackend::NearbyUsers, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](LocationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::UberBackend::NearbyRequest* req,
             ::UberBackend::NearbyUsers* resp) {
               return service->GetNearbyUsers(ctx, req, resp);
             }, this)));
}

LocationService::Service::~Service() {
}

::grpc::Status LocationService::Service::SendLocation(::grpc::ServerContext* context, const ::UberBackend::UserLocation* request, ::UberBackend::LocationAck* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LocationService::Service::GetNearbyUsers(::grpc::ServerContext* context, const ::UberBackend::NearbyRequest* request, ::UberBackend::NearbyUsers* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace UberBackend

