# Base image
FROM ubuntu:22.04

ENV DEBIAN_FRONTEND=noninteractive

# Install base development tools and libraries
RUN apt-get update && apt-get install -y \
    build-essential \
    cmake \
    git \
    curl \
    wget \
    pkg-config \
    software-properties-common \
    lsb-release \
    python3 \
    python3-pip \
    libssl-dev \
    libpq-dev \
    libmysqlclient-dev \
    libsqlite3-dev \
    uuid-dev \
    libsasl2-dev \
    zlib1g-dev \
    librabbitmq-dev \
    librdkafka-dev \
    && rm -rf /var/lib/apt/lists/*

# Install latest CMake (>= 3.25 required)
RUN apt-get purge --auto-remove cmake -y && \
    curl -OL https://github.com/Kitware/CMake/releases/download/v3.27.9/cmake-3.27.9-linux-x86_64.sh && \
    chmod +x cmake-3.27.9-linux-x86_64.sh && \
    ./cmake-3.27.9-linux-x86_64.sh --skip-license --prefix=/usr/local && \
    rm cmake-3.27.9-linux-x86_64.sh

# Install Conan
RUN pip3 install conan

# Install Uber H3
RUN git clone https://github.com/uber/h3.git && \
    cd h3 && mkdir build && cd build && \
    cmake .. -DCMAKE_POSITION_INDEPENDENT_CODE=ON && \
    make -j$(nproc) && make install && \
    cd ../.. 

# Install librdkafka from source (for full OpenSSL/SASL support)
RUN git clone https://github.com/confluentinc/librdkafka.git && \
    cd librdkafka && mkdir build && cd build && \
    cmake .. -DCMAKE_PREFIX_PATH=/usr/local/lib/cmake/RdKafka && make && \
    make install && cd ../..

# Install rabbitmq-c with CMake
RUN git clone https://github.com/alanxz/rabbitmq-c.git && \
    cd rabbitmq-c && mkdir build && cd build && \
    cmake .. -DBUILD_STATIC_LIBS=ON -DBUILD_SHARED_LIBS=ON -DENABLE_SSL_SUPPORT=ON -DBUILD_TESTS=OFF && \
    make -j$(nproc) && make install && \
    cd ../.. 

# Install nlohmann_json from source (modern CMake install)
RUN git clone https://github.com/nlohmann/json.git && \
    cd json && mkdir build && cd build && \
    cmake .. -DCMAKE_INSTALL_PREFIX=/usr/local && \
    make -j$(nproc) && make install && \
    cd ../.. && rm -rf json

# Install httplib (single-header library)
RUN curl -L https://raw.githubusercontent.com/yhirose/cpp-httplib/master/httplib.h -o /usr/local/include/httplib.h

# Clone and build AMQP-CPP

RUN git clone https://github.com/akalend/amqpcpp.git && git clone https://github.com/alanxz/rabbitmq-c.git /amqpcpp/rabbitmq-c && \
    cd amqpcpp && mkdir build && cd build && \
    cmake .. -DCMAKE_BUILD_TYPE=Release -DAMQP-CPP_BUILD_SHARED=ON && \
    make -j$(nproc) && make install && cp libamqpcpp.so /usr/local/lib && cp -r ../include/* /usr/local/include && \
    cd ../.. 

RUN git clone https://github.com/CopernicaMarketingSoftware/AMQP-CPP.git && \
    cd AMQP-CPP && mkdir build && cd build && \
    cmake .. -DCMAKE_BUILD_TYPE=Release -DAMQP-CPP_BUILD_SHARED=ON && \
    make -j$(nproc) && make install && \
    cd ../.. 

RUN cp /amqpcpp/build/libamqpcpp.so /usr/local/lib

# Ensure the system finds installed libraries
RUN ldconfig

# Set environment for CMake and Conan to find libraries in /usr/local
ENV CMAKE_PREFIX_PATH=/usr/local:/usr/local/lib/cmake:/usr/local/lib64/cmake:/usr/local/lib/cmake/RdKafka
ENV CMAKE_MODULE_PATH=/usr/local/lib/cmake
ENV PKG_CONFIG_PATH=/usr/local/lib/pkgconfig:/usr/lib/pkgconfig:/usr/lib/x86_64-linux-gnu/pkgconfig
ENV LD_LIBRARY_PATH=/usr/local/lib:/usr/lib:/usr/lib/x86_64-linux-gnu
ENV CPLUS_INCLUDE_PATH=/usr/local/include:/usr/local/include/rabbitmq-c

# Fix header path so Conan builds can find AMQPcpp.h
RUN mkdir -p /usr/local/include/rabbitmq-c && \
    ln -sf /usr/local/include/AMQPcpp.h /usr/local/include/rabbitmq-c/AMQPcpp.h

CMD ["/bin/bash"]
