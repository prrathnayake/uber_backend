name: Docker Test Deploy

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - 'docker/docker-compose.test-deploy.yml'
      - 'docker/Dockerfile.*'
      - '.github/workflows/docker-test-deploy.yml'

jobs:
  test-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: ‚¨áÔ∏è Checkout repository
        uses: actions/checkout@v4

      - name: ‚öôÔ∏è Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: üì¶ Install test dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y netcat-openbsd

      - name: üê≥ Start test deploy stack
        run: docker compose --env-file .env -f docker/docker-compose.test-deploy.yml up --build -d

      - name: ‚ôªÔ∏è Prepare test user credentials
        run: echo "TEST_USERNAME=testuser-$RANDOM" >> "$GITHUB_ENV"

      - name: ‚è±Ô∏è Wait for services to initialize
        run: |
          timeout 420 bash -c '
            until [ "$(docker compose --env-file .env -f docker/docker-compose.test-deploy.yml ps --status running --services | wc -l)" -ge 9 ]; do
              echo "Waiting for test deploy services to enter the running state..."
              sleep 10
            done
          '

      - name: üîé Wait for exposed ports
        run: |
          for port in 3307 3308 3309 5672 8081 8082 8083 9092; do
            echo "Waiting for port ${port}..."
            timeout 420 bash -c "until nc -z localhost ${port}; do sleep 5; done"
          done

      - name: ‚úÖ Verify application containers
        run: |
          docker compose --env-file .env -f docker/docker-compose.test-deploy.yml ps
          docker ps --format '{{.Names}}' | grep -F usermanager
          docker ps --format '{{.Names}}' | grep -F ridemanager
          docker ps --format '{{.Names}}' | grep -F locationmanager

      - name: ‚úÖ Smoke test user signup
        run: |
          curl --fail --retry 5 --retry-delay 5 --retry-connrefused -X POST http://localhost:8081/signup \
            -H "Content-Type: application/json" \
            -d '{
              "firstName": "firstName",
              "middleName": "middleName",
              "lastName": "lastName",
              "mobileNumber": "123456789",
              "address": "123 Test St",
              "email": "test@example.com",
              "username": "'"${TEST_USERNAME}"'",
              "password": "testpass",
              "role": "rider"
            }'

      - name: ‚úÖ Smoke test user login
        run: |
          curl --fail --retry 5 --retry-delay 5 --retry-connrefused -X POST http://localhost:8081/login \
            -H "Content-Type: application/json" \
            -d '{"username": "'"${TEST_USERNAME}"'", "password": "testpass"}'

      - name: ü™µ Capture service logs on failure
        if: failure()
        run: |
          docker compose --env-file .env -f docker/docker-compose.test-deploy.yml logs

      - name: üì¶ Clean up
        if: always()
        run: docker compose --env-file .env -f docker/docker-compose.test-deploy.yml down -v
