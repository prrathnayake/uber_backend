name: Docker Images CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    env:
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      HAS_DOCKERHUB_CREDS: ${{ secrets.DOCKERHUB_USERNAME != '' && secrets.DOCKERHUB_TOKEN != '' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Validate DockerHub credentials
        run: |
          if [ "${HAS_DOCKERHUB_CREDS}" != "true" ]; then
            echo "DockerHub credentials are not configured. Docker images will be built but not pushed." >&2
          fi

      - name: Login to DockerHub
        if: env.HAS_DOCKERHUB_CREDS == 'true'
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_TOKEN }}

      - name: Build and push service images
        env:
          DOCKERHUB_USERNAME: ${{ env.DOCKERHUB_USERNAME }}
          HAS_DOCKERHUB_CREDS: ${{ env.HAS_DOCKERHUB_CREDS }}
        run: |
          set -euo pipefail

          images=(
            "docker/Dockerfile.base uber-base"
            "docker/Dockerfile.UserManager usermanager"
            "docker/Dockerfile.RideManager ridemanager"
            "docker/Dockerfile.LocationManager locationmanager"
          )

          for entry in "${images[@]}"; do
            IFS=' ' read -r dockerfile image_name <<< "${entry}"

            local_tag="${image_name}:ci"
            echo "Building ${dockerfile} as ${local_tag}"
            docker build -f "${dockerfile}" -t "${local_tag}" .

            if [ "${HAS_DOCKERHUB_CREDS}" = "true" ]; then
              remote_tag="${DOCKERHUB_USERNAME}/${image_name}:latest"
              echo "Pushing ${remote_tag}"
              docker tag "${local_tag}" "${remote_tag}"
              docker push "${remote_tag}"
            else
              echo "Skipping push for ${image_name}; DockerHub credentials not available."
            fi
          done
