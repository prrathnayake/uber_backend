name: Uber_Backend_Workflow (Docker Compose)

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    env:
      HAS_DOCKERHUB_CREDS: ${{ secrets.DOCKERHUB_USERNAME != '' && secrets.DOCKERHUB_TOKEN != '' }}

    steps:
      - name: ‚¨áÔ∏è Checkout repository
        uses: actions/checkout@v4

      - name: ‚öôÔ∏è Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: üì¶ Install test dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y netcat-openbsd

      - name: üîê Log in to DockerHub
        if: env.HAS_DOCKERHUB_CREDS == 'true'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: ‚ÑπÔ∏è DockerHub credentials status
        run: |
          if [ "${HAS_DOCKERHUB_CREDS}" = "true" ]; then
            echo "DockerHub credentials detected."
          else
            echo "DockerHub credentials not provided. Proceeding without registry login."
          fi

      - name: üê≥ Start Docker Compose stack
        run: docker compose --env-file .env -f docker/docker-compose.yml up --build -d

      - name: ‚ôªÔ∏è Prepare test user credentials
        run: echo "TEST_USERNAME=testuser-$RANDOM" >> "$GITHUB_ENV"

      - name: ‚è±Ô∏è Wait for services to initialize
        run: |
          timeout 420 bash -c '
            until [ "$(docker compose --env-file .env -f docker/docker-compose.yml ps --status running --services | wc -l)" -ge 9 ]; do
              echo "Waiting for application services to enter the running state..."
              sleep 10
            done
          '

      - name: üîé Wait for critical ports
        run: |
          for port in 3307 3308 3309 5672 8081 8082 8083 9092; do
            echo "Waiting for port ${port}..."
            timeout 420 bash -c "until nc -z localhost ${port}; do sleep 5; done"
          done

      - name: ‚úÖ Wait for UserManager health endpoint
        run: |
          python3 - <<'PY'
import json
import sys
import time
import urllib.error
import urllib.request

url = "http://localhost:8081/health"
deadline = time.time() + 420

while time.time() < deadline:
    try:
        with urllib.request.urlopen(url, timeout=5) as response:
            payload = json.load(response)
        if payload.get("database", {}).get("healthy"):
            print("UserManager health check passed.")
            sys.exit(0)
        print("Health endpoint reachable but database not yet healthy.", file=sys.stderr)
    except Exception as exc:  # noqa: BLE001
        print(f"Waiting for health endpoint: {exc}", file=sys.stderr)

    time.sleep(5)

print("Timed out waiting for UserManager health endpoint to become healthy.", file=sys.stderr)
sys.exit(1)
PY

      - name: ‚úÖ Test - All containers are running
        run: |
          docker ps
          docker ps --format '{{.Names}}' | grep -Fx usermanager
          docker ps --format '{{.Names}}' | grep -Fx ridemanager
          docker ps --format '{{.Names}}' | grep -Fx locationmanager

      - name: ü™µ Print MySQL logs (debug)
        if: failure()
        run: |
          docker logs usermanager-db
          docker logs ridemanager-db
          docker logs locationmanager-db

      - name: ‚úÖ Test - MySQL ports open
        run: |
          nc -z localhost 3307
          nc -z localhost 3308
          nc -z localhost 3309

      - name: ‚úÖ Test - Application ports open
        run: |
          nc -z localhost 8081
          nc -z localhost 8082
          nc -z localhost 8083

      - name: ‚úÖ Test - POST /signup HTTP endpoint
        run: |
          curl --fail --retry 5 --retry-delay 5 --retry-connrefused -X POST http://localhost:8081/signup \
            -H "Content-Type: application/json" \
            -d '{
              "firstName": "firstName",
              "middleName": "middleName",
              "lastName": "lastName",
              "mobileNumber": "123456789",
              "address": "123 Test St",
              "email": "test@example.com",
              "username": "'"${TEST_USERNAME}"'",
              "password": "testpass",
              "role": "rider"
            }'

      - name: ‚úÖ Test - POST /login HTTP endpoint
        run: |
          curl --fail --retry 5 --retry-delay 5 --retry-connrefused -X POST http://localhost:8081/login \
            -H "Content-Type: application/json" \
            -d '{"username": "'"${TEST_USERNAME}"'", "password": "testpass"}'

      - name: ‚úÖ Test - Kafka port
        run: nc -z localhost 9092

      - name: üì¶ Clean up
        if: always()
        run: docker compose --env-file .env -f docker/docker-compose.yml down -v
